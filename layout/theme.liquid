<!doctype html>

<html class="no-js" lang="{{ shop.locale }}">
  <head>
    <meta charset="utf-8"> 
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, maximum-scale=1.0">
    <meta name="theme-color" content="{{ settings.accent_color }}">

    <title>
      {{ page_title }}{% if current_tags %}{% assign meta_tags = current_tags | join: ', ' %} &ndash; {{ 'general.meta.tags' | t: tags: meta_tags }}{% endif %}{% if current_page != 1 %} &ndash; {{ 'general.meta.page' | t: page: current_page }}{% endif %}{% unless page_title contains shop.name %} &ndash; {{ shop.name }}{% endunless %}
    </title>

    {%- if page_description -%}
      <meta name="description" content="{{ page_description | escape }}">
    {%- endif -%}

    <link rel="canonical" href="{{ canonical_url }}">

    {%- if settings.favicon -%}
      <link rel="shortcut icon" href="{{ settings.favicon | img_url: '96x' }}" type="image/png">
    {%- endif -%}

    {% render 'social-meta-tags' %}
    {% render 'css-variables' %}

    {{ content_for_header }}

    <link rel="stylesheet" href="{{ 'theme.css' | asset_url }}">

    <script>
      {%- if request.page_type == 'policy' -%}
        document.addEventListener('DOMContentLoaded', function() {
          document.querySelector('.shopify-policy__title').classList.add('PageHeader', 'Heading', 'u-h1');
        });
      {%- endif -%}

      // This allows to expose several variables to the global scope, to be used in scripts
      window.theme = {
        pageType: {{ request.page_type | json }},
        moneyFormat: {{ shop.money_format | json }},
        moneyWithCurrencyFormat: {{ shop.money_with_currency_format | json }},
        productImageSize: {{ settings.product_image_size | json }},
        searchMode: {{ settings.search_mode | json }},
        showPageTransition: {{ settings.show_page_transition | json }},
        showElementStaggering: {{ settings.show_element_staggering | json }},
        showImageZooming: {{ settings.show_image_zooming | json }}
      };

      window.routes = {
        rootUrl: {{ routes.root_url | json }},
        rootUrlWithoutSlash: {% if routes.root_url == '/' %}''{% else %}{{ routes.root_url | json }}{% endif %},
        cartUrl: {{ routes.cart_url | json }},
        cartAddUrl: {{ routes.cart_add_url | json }},
        cartChangeUrl: {{ routes.cart_change_url | json }},
        searchUrl: {{ routes.search_url | json }},
        productRecommendationsUrl: {{ routes.product_recommendations_url | json }}
      };

      window.languages = {
        cartAddNote: {{ 'cart.general.add_note' | t | json }},
        cartEditNote: {{ 'cart.general.edit_note' | t | json }},
        productImageLoadingError: {{ 'product.slideshow.image_loading_error' | t | json }},
        productFormAddToCart: {% if product.template_suffix == 'pre-order' %}{{ 'product.form.pre_order' | t | json }}{% else %}{{ 'product.form.add_to_cart' | t | json }}{% endif %},
        productFormUnavailable: {{ 'product.form.unavailable' | t | json }},
        productFormSoldOut: {{ 'product.form.sold_out' | t | json }},
        shippingEstimatorOneResult: {{ 'cart.shipping_estimator.one_result_title' | t | json }},
        shippingEstimatorMoreResults: {{ 'cart.shipping_estimator.more_results_title' | t | json }},
        shippingEstimatorNoResults: {{ 'cart.shipping_estimator.no_results_title' | t | json }}
      };

      window.lazySizesConfig = {
        loadHidden: false,
        hFac: 0.5,
        expFactor: 2,
        ricTimeout: 150,
        lazyClass: 'Image--lazyLoad',
        loadingClass: 'Image--lazyLoading',
        loadedClass: 'Image--lazyLoaded'
      };

      document.documentElement.className = document.documentElement.className.replace('no-js', 'js');
      document.documentElement.style.setProperty('--window-height', window.innerHeight + 'px');

      // We do a quick detection of some features (we could use Modernizr but for so little...)
      (function() {
        document.documentElement.className += ((window.CSS && window.CSS.supports('(position: sticky) or (position: -webkit-sticky)')) ? ' supports-sticky' : ' no-supports-sticky');
        document.documentElement.className += (window.matchMedia('(-moz-touch-enabled: 1), (hover: none)')).matches ? ' no-supports-hover' : ' supports-hover';
      }());
    </script>

    <script src="{{ 'lazysizes.min.js' | asset_url }}" async></script>

    {%- if template == 'customers/addresses' -%}
      <script src="{{ 'shopify_common.js' | shopify_asset_url }}" defer></script>
      <script src="{{ 'customer_area.js' | shopify_asset_url }}" defer></script>
    {%- endif -%}

    <script src="https://cdn.polyfill.io/v3/polyfill.min.js?unknown=polyfill&features=fetch,Element.prototype.closest,Element.prototype.remove,Element.prototype.classList,Array.prototype.includes,Array.prototype.fill,Object.assign,CustomEvent,IntersectionObserver,IntersectionObserverEntry,URL" defer></script>
    <script src="{{ 'libs.min.js' | asset_url }}" defer></script>
    <script src="{{ 'theme.min.js' | asset_url }}" defer></script>
    <script src="{{ 'custom.js' | asset_url }}" defer></script>

    <script>
      (function () {
        window.onpageshow = function() {
          if (window.theme.showPageTransition) {
            var pageTransition = document.querySelector('.PageTransition');

            if (pageTransition) {
              pageTransition.style.visibility = 'visible';
              pageTransition.style.opacity = '0';
            }
          }

          // When the page is loaded from the cache, we have to reload the cart content
          document.documentElement.dispatchEvent(new CustomEvent('cart:refresh', {
            bubbles: true
          }));
        };
      })();
    </script>

    {% render 'microdata-schema' %}
  </head>

  {%- capture classes -%}features--heading-{{ settings.heading_size }}{%- endcapture -%}

  {%- if settings.uppercase_heading -%}
    {%- assign classes = classes | append: ' features--heading-uppercase' -%}
  {%- endif -%}

  {%- if settings.product_show_price_on_hover -%}
    {%- assign classes = classes | append: ' features--show-price-on-hover' -%}
  {%- endif -%}

  {%- if settings.show_page_transition -%}
    {%- assign classes = classes | append: ' features--show-page-transition' -%}
  {%- endif -%}

  {%- if settings.show_button_transition -%}
    {%- assign classes = classes | append: ' features--show-button-transition' -%}
  {%- endif -%}

  {%- if settings.show_image_zooming -%}
    {%- assign classes = classes | append: ' features--show-image-zooming' -%}
  {%- endif -%}

  {%- if settings.show_element_staggering -%}
    {%- assign classes = classes | append: ' features--show-element-staggering' -%}
  {%- endif -%}

  <body class="prestige--v4 {{ classes }} {% if template.directory %}template-{{ template.directory | handle }}{% endif %} template-{{ template.name | handle }}">
    <a class="PageSkipLink u-visually-hidden" href="#main">{{ 'header.navigation.skip_to_content' | t }}</a>
    <span class="LoadingBar"></span>
    <div class="PageOverlay"></div>

    {%- if settings.show_page_transition -%}
      <div class="PageTransition"></div>
    {%- endif -%}

    {% section 'popup' %}
    {% section 'sidebar-menu' %}

    {%- if template != 'cart' -%}
      {% render 'cart-drawer' %}
    {%- endif -%}

    <div class="PageContainer">
      {% section 'announcement' %}
      {% section 'header' %}

      <main id="main" role="main">
        {{ content_for_layout }}
      </main>

      {% section 'footer' %}
    </div>

    <script>
      const ShopifyCartURLs = [
  "/cart/add",
  "/cart/update",
  "/cart/change",
  "/cart/clear",
  "/cart/add.js",
  "/cart/update.js",
  "/cart/change.js",
  "/cart/clear.js"
];

function isShopifyCartURL(url) {
  if (!url) return false;
  const path = url.split("/").pop();
  return ShopifyCartURLs.includes(`/cart/${path}`);
}

//shopify api interacts with stringify payload
//this functions parse payload into json
function parsePayload(payloadString) {
  if (payloadString.hasOwnProperty("body")) {
    return JSON.parse(payloadString.body);
  }
  return null;
}


function getMetafieldLimits(lastCart) {
  
  const storeName = 'equilibriumtestinglab';
  const productId = '40120367186106';
  const saccesstoken = 'xxxxxxxxxxxxxxxx'

  const items = lastCart
  console.log("itemsxd", items)

  let itemsLimitsArray = []

  const headers = new Headers({
      'Content-Type': 'application/json',
      'X-Shopify-Access-Token': saccesstoken
    });

    for(let i=0; i<items.length; i++){
      fetch(`https://equilibriumtestinglab.myshopify.com/admin/api/2023-01/variants/${items[i].variant_id}/metafields.json`,{headers:headers})
      .then(response => response.json())
      .then(metafields =>{
        console.log(metafields)
        let itemLimitObj = {}
        itemLimitObj[items[i].variant_id] = {qty: metafields.metafields.find(itemLimit=>itemLimit.key === 'customlimit')?.value ?? 99 };
        itemsLimitsArray.push(itemLimitObj)
      })
      .finally(()=> {
        window.productLimit = itemsLimitsArray
        console.log("finally",itemsLimitsArray)
      })
      .catch(error => console.error(error));
  }
    }//

// checks if request is increasing items or adding items as far those are the only two options
// to add items in shopify.
//functions check which of the two possible addition items is being called in fetch 
function isAddRequest(payloadString, cartItems, productLimit) {
  console.log(payloadString)
  const parsedPayload = parsePayload(payloadString);
  if (parsedPayload) {
    if (parsedPayload.hasOwnProperty("line")) {
      const itemLinePosition = parseInt(parsedPayload.line);
      console.log("cartitemsiteratedinlineupdates", cartItems, "itemlineposition", itemLinePosition)
      const itemId = cartItems[itemLinePosition - 1].id;
      const itemLimit = productLimit.find(el => el[itemId])[itemId].qty;
      const cartItemIndex = cartItems.findIndex(ci => ci.id === itemId);
      if (parsedPayload.quantity > itemLimit) {
        window.initialShopifyCart.items[cartItemIndex].quantity += 1;
      } else {
        window.initialShopifyCart.items[cartItemIndex].quantity = parsedPayload.quantity;
        window.initialShopifyCart.items = window.initialShopifyCart.items.filter(i=>i.quantity !== 0)
        console.log("cartafterdeleteitem", window.initialShopifyCart.items)
      }
      return parsedPayload.quantity > itemLimit;
    } else if (parsedPayload.hasOwnProperty("id") && cartItems.length) {
      console.log("parsedPayload", parsedPayload);
      const itemId = parseInt(parsedPayload.id);
      const itemLimit = !!productLimit.find(i => i[itemId]) ? productLimit.find(i => i[itemId])[itemId].qty : 99;
      console.log(cartItems ,cartItems.find(e => e.id === itemId) !== undefined)
      let itemCurrentQuantity
      if(cartItems.find(e => e.id === itemId) !== undefined){
        itemCurrentQuantity = cartItems.find(e => e.id === itemId).quantity
      }else itemCurrentQuantity = 0
      const cartItemIndex = cartItems.findIndex(ci => ci.id === itemId);
      console.log(cartItemIndex)
      cartItemIndex !== -1 ? window.initialShopifyCart.items[cartItemIndex].quantity += 1 : window.initialShopifyCart.items.unshift({variant_id:itemId, quantity:1, id:itemId})
      console.log("308",window.initialShopifyCart.items)
      getMetafieldLimits(window.initialShopifyCart.items)
      return itemCurrentQuantity + 1> itemLimit;
    }else if(parsedPayload.hasOwnProperty("id") && !cartItems.length){
      const itemId = parseInt(parsedPayload.id);
      window.initialShopifyCart.items.unshift({id:itemId, variant_id:itemId, quantity:1})
      getMetafieldLimits(window.initialShopifyCart.items)
    }
  }
  return false;
}


//this is our mock. Limits are setting in global variable to be accessible for all the functions
//that references this variable
/*window.productLimit = [
  { 40120376459450: { qty: 2, isLimited: false } },
  { 40120367186106: { qty: 3, isLimited: false } }
];*/
  

// gets the last cart state and sets the data in a global variable in order to handle data
// depending in requests and user cart interactions
//this is executed in the window load
  function getLastCartState() {
    fetch(`${window.location.origin}/cart.js`)
      .then(res =>
        res.json().then(data => {
          const localcart = data;
          console.log("localCart", localcart);
          window.initialShopifyCart = localcart;

          //
          
    getMetafieldLimits(localcart.items)
    //
        })
      );
  }
  
  window.addEventListener("load", getLastCartState);
  
  //customize fetch in order to intercept and handle responses related to Shopify Cart
  //this just have effect on add/change requests and returns original fetch method
  //for other requests
  function fetchOverride() {
    if (!window.fetch || typeof window.fetch !== "function") return;
  
    const originalFetch = window.fetch;
    window.fetch = function() {
      let response;

      /*if(isShopifyCartURL(arguments[0])){
        getLastCartState()
      }*/
  
      if (
        isShopifyCartURL(arguments[0]) &&
        arguments.length > 1 &&
        isAddRequest(arguments[1], window.initialShopifyCart.items, window.productLimit)
      ) {
        console.log("arguments", arguments);
        //alert("nop")
        let modal = document.getElementById('myModal')
        modal.style.display = 'flex'
        return Promise.resolve({
          status: 400,
          json: () =>
            Promise.resolve({
              status: 422,
              message:"Cart Error",
              description: "You cannot add more than the maximum allowed quantity to the cart."
            })
        });
      }
        else response = originalFetch.apply(this, arguments)
        return response;
    };
  }
  
  fetchOverride();

  

  

  window.addEventListener("click", function(event) {
    let modal = document.getElementById('myModal')
      if (event.target == modal) {
        modal.style.display = "none";
      }
    });

    function closeModal() {
      let modal = document.getElementById("myModal");
      modal.style.display = "none";
    }


    </script>
    
    {% comment %} /*html for modal*/ {% endcomment %}

    <div id="myModal" class="modal">
      <div class="modal-content" >
        <span onclick="closeModal()" id="closeBtn" class="close">&times;</span>
        <p>You've added maximum quantity for this item.</p>
        </div>
      
    </div>

    <style>
      /* Modal */
.modal {
  display: none;
  position: fixed; 
  z-index: 999; 
  left: 0;
  top: 0;
  width: 100%; 
  height: 100%; 
  color: #fff;
  background-color: rgb(0,0,0);
  background-color: rgba(0,0,0,0.4); 
  left: 50%; 
  top: 50%; 
  transform: translate(-50%, -50%);
  box-sizing: border-box;
  /*padding: 20px;*/
  border: 1px solid #888;
  text-align: center;
  justify-content: center;
  align-items: center;
}



/* Contenido del modal */
.modal-content {
  background-color: #fefefe;
  margin: auto;
  padding: 20px;
  border: 1px solid #888;
  min-width: 30%;
  height: 20%;
  border-radius: 10px;
  justify-content: center;
  align-items: center;
  text-align: center;
  color: #000;
  position: relative;
  display: flex;
}

.modal-content p{
  font-size: larger;
  color: #000;
}

/* Botón de cierre */
.close {
  position: absolute;
  top: 0;
  right: 10px;
  cursor: pointer;
  color: #000;
  font-size: 24px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: rgba(0,0,0,0.1);
  text-decoration: none;
  cursor: pointer;
}
    </style>
  </body>
</html>
